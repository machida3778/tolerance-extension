{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "tolerance",
	"patterns": [
		{
			"include": "#statements"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#control-statement"
				},
				{
					"include": "#const"
				},
				{
					"include": "#lambda"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#stack-instructions"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#invalid-chars"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.tolerance",
					"begin": "##\\s*$",
					"end": "##"
				},
				{
					"begin": "(^\\s+)?(#)",
					"beginCaptures": {
						"0": {
							"name": "comment.line.tolerance"
						}
					},
					"end": "(?=$)",
					"contentName": "comment.line.tolerance"
				}
			]
		},
		"control-statement": {
			"patterns": [{
				"name": "keyword.control.tolerance",
				"match": "(?<![_$[:alnum:]])(if|elif|else|then|while|for|in|try|except|finally|throw|goto|@stack|pass|return|continue|break|global)(?![_$[:alnum:]])"
			}]
		},
		"const": {
			"name": "storage.modifier.tolerance",
			"match": "(?<![_$[:alnum:]])const(?![_$[:alnum:]])"
		},
		"lambda": {
			"patterns": [{
				"name": "storage.modifier.tolerance",
				"match": "(?<![_$[:alnum:]])lambda(?![_$[:alnum:]])"
			}]
		},
		"operators": {
			"patterns": [
				{
					"include": "#arithmetic-operators"
				},
				{
					"include": "#logical-operators"
				},
				{
					"include": "#comparison-operators"
				},
				{
					"include": "#assignment-operators"
				}
			]
		},
		"arithmetic-operators": {
			"patterns": [{
				"name": "keyword.operator.tolerance",
				"match": "(\\+|-|/|\\*|%|\\+\\+|--)"
			}]
		},
		"logical-operators": {
			"patterns": [{
				"name": "keyword.operator.new.tolerance",
				"match": "(?<![_$[:alnum:]])(and|or|not)(?![_$[:alnum:]])"
			}]
		},
		"comparison-operators": {
			"patterns": [{
				"name": "keyword.operator.tolerance",
				"match": "(?<![_$[:alnum:]])(==|!=|<|<=|>|>=)(?![_$[:alnum:]])"
			}]
		},
		"assignment-operators": {
			"patterns": [{
				"name": "keyword.operator.tolerance",
				"match": "(?<![_$[:alnum:]])(=|\\+=|-=|\\*=|%=)(?![_$[:alnum:]])"
			}]
		},
		"stack-instructions": {
			"patterns": [{
				"name": "token.info-token.tolerance",
				"match": "\\s+(?<![_$[:alnum:]])(clear|depth|swap|roll|rot|dup|2dup|3dup|drop|2drop|3drop|fdrop|sdrop|pick|fpick|spick|!)(?![_$[:alnum:]])\\s+"
			}]
		},
		"expression": {
			"patterns": [
				{
					"include": "#double"
				},
				{
					"include": "#int"
				},
				{
					"include": "#string"
				},
				{
					"include": "#specific-literals"
				},
				{
					"include": "#const"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#colon"
				},
				{
					"include": "#dot"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"int": {
			"name": "constant.numeric.int.tolerance",
			"match": "(?<![_$[:alnum:]])(([1-9][0-9]*)|0)(?![_$[:alnum:]])"
		},
		"double": {
			"name": "constant.numeric.double.tolrance",
			"match": "(?<![_$[:alnum:]])[0-9]+\\.[0-9]+(?![_$[:alnum:]])"
		},
		"string": {
			"name": "string.quoted.double.tolerance",
			"match": "(?<![_$[:alnum:]])\".*?\"(?![_$[:alnum:]])"
		},
		"specific-literals": {
			"name": "constant.language.tolrance",
			"match": "(?<![_$[:alnum:]])(true|false|null)(?![_$[:alnum:]])"
		},
		"comma": {
			"name": "keyword.operator.comma.tolerance",
			"match": ","
		},
		"colon": {
			"name": "keyword.operator.colon.tolerance",
			"match": ":"
		},
		"dot": {
			"name": "keyword.operator.dot.tolerance",
			"match": "\\."
		},
		"identifier": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])([A-Za-z_][A-Za-z_0-9]*)(?![_$[:alnum:]])\\s*(::)",
					"captures": {
						"1": {
							"name": "entity.name.function.tolerance"
						},
						"2": {
							"name": "storage.type.tolerance"
						}
					}
				},
				{
					"name": "support.function.tolrance",
					"match": "(?<![_$[:alnum:]])[A-Za-z_][A-Za-z_0-9]*\\s*(?=\\()(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.member.tolerance",
					"match": "(?<![_$[:alnum:]])(?<=\\.)[A-Za-z_][A-Za-z_0-9]*(?![_$[:alnum:]])"
				},
				{
					"name": "markup.changed.label.declaration.tolerance",
					"match": "(?<!if\\s+)(?<!elif\\s+)(?<!while\\s+)(?<!in\\s+)(?<!except\\s+)(?<![_$[:alnum:]])[A-Za-z_][A-Za-z_0-9]*(?![_$[:alnum:]])\\s*(?=:)"
				},
				{
					"name": "markup.changed.label.call.tolerance",
					"match": "((?<=break\\s+)|(?<=continue\\s+))(?<![_$[:alnum:]])[A-Za-z_][A-Za-z_0-9]*(?![_$[:alnum:]])"
				},
				{
					"name": "variable.other.tolerance",
					"match": "(?<![_$[:alnum:]])[A-Za-z_][A-Za-z_0-9]*(?![_$[:alnum:]])"
				}
			]
		},
		"invalid-chars": {
			"patterns": [{
					"name": "invalid.tolerance",
					"match": "."
			}]
		}
	},
	"scopeName": "source.tolerance"
}